  const queryObj = { ...query };
  // {email: {$regex: query.searchTerm, $option: "i"}}

  const studentSearchableFields = [
    "email",
    "name.lastName",
    "guardian.fatherName",
  ];
  let searchTerm = "";

  if (query?.searchTerm) {
    searchTerm = query?.searchTerm as string;
  }

  // method chaining
  const searchQuery = Student.find({
    $or: studentSearchableFields.map((field) => ({
      [field]: { $regex: searchTerm, $options: "i" },
    })),
  });

  // filtering
  const excludeFields = ["searchTerm", "sort", "limit", "page", "fields"];

  excludeFields.forEach((el) => delete queryObj[el]);

  const filterQuery = searchQuery
    .find(queryObj)
    .populate("admissionSemester")
    .populate({
      path: "academicDepartment",
      populate: {
        path: "academicFaculty",
      },
    });

  // sorting
  let sort = "-createdAt";

  if (query?.sort) {
    sort = query?.sort as string;
  }

  const sortQuery = filterQuery.sort(sort);

  // paiginating and limiting
  let page = 1;
  let limit = 1;
  let skip = 0;

  if (query?.limit) {
    limit = Number(query?.limit);
  }

  if (query?.page) {
    page = Number(query?.page);
    skip = (page - 1) * limit;
  }

  const paiginateQuery = sortQuery.skip(skip);

  const limitQuery = paiginateQuery.limit(limit);

  // field limiting

  let fields = "-__v";

  if (query?.fields) {
    // fields = (query?.fields as string).split(",").join(" ");
    fields = (query?.fields as string).replace(/\b,\b/g, " ");
  }

  console.log({ query, fields });

  const fieldsLimitingQuery = await limitQuery.select(fields);
  return fieldsLimitingQuery;